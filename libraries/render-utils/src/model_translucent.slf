<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  model_translucent.frag
//  fragment shader
//
//  Created by Sam Gateau on 2/15/2016.
//  Copyright 2014 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include graphics/Material.slh@>

<@include DeferredGlobalLight.slh@>

<$declareEvalGlobalLightingAlphaBlendedWithHaze()$>

<@include LightLocal.slh@>

<@include gpu/Transform.slh@>
<$declareStandardCameraTransform()$>

<@include MaterialTextures.slh@>
<$declareMaterialTextures(ALBEDO, ROUGHNESS, _SCRIBE_NULL, _SCRIBE_NULL, EMISSIVE, OCCLUSION)$>

in vec2 _texCoord0;
in vec2 _texCoord1;
in vec4 _position;
in vec4 _worldPosition;
in vec3 _normal;
in vec3 _color;
in float _alpha;

out vec4 _fragColor;

void main(void) {
    Material mat = getMaterial();
    int matKey = getMaterialKey(mat);
    <$fetchMaterialTexturesCoord0(matKey, _texCoord0, albedoTex, roughnessTex, _SCRIBE_NULL, _SCRIBE_NULL, emissiveTex)$>
    <$fetchMaterialTexturesCoord1(matKey, _texCoord1, occlusionTex)$>

    float opacity = getMaterialOpacity(mat) * _alpha;
    <$evalMaterialOpacity(albedoTex.a, opacity, matKey, opacity)$>;

    vec3 albedo = getMaterialAlbedo(mat);
    <$evalMaterialAlbedo(albedoTex, albedo, matKey, albedo)$>;
    albedo *= _color;

    float roughness = getMaterialRoughness(mat);
    <$evalMaterialRoughness(roughnessTex, roughness, matKey, roughness)$>;

    float metallic = getMaterialMetallic(mat);
    vec3 fresnel = getFresnelF0(metallic, albedo);

    vec3 emissive = getMaterialEmissive(mat);
    <$evalMaterialEmissive(emissiveTex, emissive, matKey, emissive)$>;

    vec3 fragPosition = _position.xyz;
    // Lighting is done in world space
    vec3 fragNormal = normalize(_normal);

    TransformCamera cam = getTransformCamera();
    vec3 fragEyeVector = vec3(cam._viewInverse * vec4(-fragPosition, 0.0));
    vec3 fragEyeDir = normalize(fragEyeVector);
    SurfaceData surface = initSurfaceData(roughness, fragNormal, fragEyeDir);

    vec4 localLighting = vec4(0.0);

    <$fetchClusterInfo(_worldPosition)$>;
    if (hasLocalLights(numLights, clusterPos, dims)) {
        localLighting = evalLocalLighting(cluster, numLights, _worldPosition.xyz, surface,
                                          metallic, fresnel, albedo, 0.0,
                                          vec4(0), vec4(0), opacity);
    }

    _fragColor =  vec4(evalGlobalLightingAlphaBlendedWithHaze(
        cam._viewInverse,
        1.0,
        occlusionTex,
        fragPosition,
        albedo,
        fresnel,
        metallic,
        emissive,
        surface, opacity, localLighting.rgb),
        opacity);
}
